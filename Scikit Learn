{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "iris_train_plot",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/IamSAL/DataSci/blob/master/iris_train_plot.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zh34x-VwuGT4",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "**Train Test Split**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bj9FQViuuNhU",
        "colab_type": "code",
        "outputId": "2202d17b-525e-43b1-8a08-ce801dc6faa5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "import warnings\n",
        "\n",
        "import numpy as np\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n",
        "\n",
        "iris = load_iris()\n",
        "\n",
        "X = iris.data\n",
        "y = iris.target\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=3)\n",
        "\n",
        "# logistic_reg\n",
        "lgr = LogisticRegression(solver='liblinear', multi_class='auto')\n",
        "lgr.fit(X_train, y_train)\n",
        "y_pred = lgr.predict(X_test)\n",
        "score_lr = accuracy_score(y_test, y_pred)\n",
        "\n",
        "# KNN\n",
        "knn2 = KNeighborsClassifier()\n",
        "param_grid = {'n_neighbors': np.arange(1, 50)}\n",
        "knn_gscv = GridSearchCV(knn2, param_grid, cv=5)\n",
        "knn_gscv.fit(X_train, y_train)\n",
        "best_n = knn_gscv.best_params_['n_neighbors']\n",
        "\n",
        "\n",
        "knn = KNeighborsClassifier(n_neighbors=best_n)\n",
        "knn.fit(X_train, y_train)\n",
        "y_pred_knn = knn.predict(X_test)\n",
        "score_knn = accuracy_score(y_test, y_pred_knn)\n",
        "\n",
        "\n",
        "print(\"logistic_regression:\", score_lr)\n",
        "print(\"KNN:\", score_knn)\n"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "logistic_regression: 1.0\n",
            "KNN: 0.9777777777777777\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pYVBJUDG5tpd",
        "colab_type": "text"
      },
      "source": [
        "**KNN (n = 1 to 30) -> can you find, which ‘n’ provides the highest accuracy?**\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m43TPYhv5r82",
        "colab_type": "code",
        "outputId": "782a8061-ea6c-467c-9d1d-4ddcb852a6da",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "current_score=0\n",
        "high_score=0;\n",
        "high_n=0\n",
        "scores=[]\n",
        "\n",
        "for i in range (1,31):\n",
        "  knn = KNeighborsClassifier(n_neighbors=i)\n",
        "  knn.fit(X_train, y_train)\n",
        "  y_pred_knn = knn.predict(X_test)\n",
        "  score_knn = accuracy_score(y_test, y_pred_knn)\n",
        "  scores.append(score_knn)\n",
        "  if score_knn>current_score:\n",
        "    high_score=score_knn\n",
        "    high_n=i\n",
        "    current_score=high_score\n",
        "\n",
        "  \n",
        "print(\"Highest score:\",high_score,\"while n:\",high_n)  \n",
        "\n",
        "  "
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Highest score: 0.9777777777777777 while n: 9\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_EyLcH_0GKax",
        "colab_type": "text"
      },
      "source": [
        "**Can you plot a simple graph, where K values (1-30) form your x-axis and accuracy score 0-1 form your y-axis?**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gXHvMeQ7EFEr",
        "colab_type": "code",
        "outputId": "d2fda1ba-ad71-46c9-9d49-4752bab1a692",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(np.arange(1,31),scores,color='green', marker='o',linewidth=1, markersize=5)\n",
        "plt.xlabel(\"n_neighbors\")\n",
        "plt.ylabel(\"accuracy\")\n",
        "\n",
        "# plt.axis([7, 15, 0, 1.5])\n",
        "plt.show"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G_xfiHny_I0f",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "\n",
        "> Indented block\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vNY-cvq3-YDS",
        "colab_type": "text"
      },
      "source": [
        "**Cross Validation:Cross_val_score**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VMI3ZYZj-fBY",
        "colab_type": "code",
        "outputId": "7409fab4-5001-4e74-9145-0b77e65e8c4d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        }
      },
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "#testing knn with 1<n_neighbours<=45\n",
        "score_knnX=[]\n",
        "for i in range(1,45):\n",
        "\n",
        "  knnX=KNeighborsClassifier(n_neighbors=i)\n",
        "  cross_score_knn=cross_val_score(knnX, X, y, cv=10, scoring='accuracy')\n",
        "  score_knnX.append(cross_score_knn.mean())\n",
        "\n",
        "plt.plot(np.arange(1,45),score_knnX)\n",
        "plt.xlabel(\"n_neighbors\")\n",
        "plt.ylabel(\"mean_cross_accuracy\")\n",
        "\n",
        "plt.show()  "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY4AAAEHCAYAAAC5u6FsAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO3de3zc5XXv+89X1/FF0tiWLAlrjA2Y\ni8FmnBga0qYQ2nRDmnJLmg3JbpPutOw2pTs9KTmBnZPslpaTpkl3eglND01JQpqWUJo2tIcGUi7J\nPklIMPHYxhiDMWDJV/kyutm6r/PH7zfyeDwj/cbWaCTNer9e8/LM76ZnBjFLz/P8nrVkZjjnnHNR\nVZW7Ac455+YWDxzOOeeK4oHDOedcUTxwOOecK4oHDuecc0WpKXcDZkJzc7OtWrWq3M1wzrk55fnn\nnz9sZi252ysicKxatYpNmzaVuxnOOTenSHoj33YfqnLOOVcUDxzOOeeK4oHDOedcUTxwOOecK4oH\nDuecc0UpaeCQdJ2knZJ2Sborz/5zJT0paaukZyR1ZO37E0nbJe2Q9BeSFG5/s6Rt4TUntjvnnJsZ\nJQsckqqB+4DrgbXAbZLW5hz2OeBBM1sP3AN8Ojz3rcBPA+uBy4ArgKvDc74I/AawJnxcV6r34Jxz\n7nSl7HFcCewys91mNgw8BNyYc8xa4Knw+dNZ+w2IAXVAPVALHJTUDjSa2bMW5IN/ELiphO/BTbNX\nDvaxu7u/3M0AYHBkjGd2Hir6PDPjyR0HGRv3kgSuMpUycKwAOrNed4Xbsm0Bbgmf3ww0SFpmZj8k\nCCT7w8fjZrYjPL9rimsCIOl2SZskberu7j7rN+Omx39/KMXv/eOWcjcDgG8818kHv/wcLx/sK+q8\n7+86woe+uon//Yr/XrnKVO7J8TuBqyVtJhiK2guMSboAuAToIAgM10p6WzEXNrP7zWyjmW1saTlt\nxbwrg/6hUV460Mv2vb0MjY6Vuzk8/8YxAH4S/lvseV3HTkx7m5ybC0oZOPYCiazXHeG2CWa2z8xu\nMbMNwCfCbWmC3sezZtZvZv3AvwNXhed3THZNN3tt7UpjBsNj47y4r7fczSHVmT7l3+jnBYHjYO/g\ntLfJubmglIHjOWCNpNWS6oBbgUezD5DULCnThruBB8Lnewh6IjWSagl6IzvMbD/QK+kt4d1Uvwp8\nq4TvwU2j7C/oYr+sp9uR/iH2HD1edFvMbOL4/T0eOFxlKlngMLNR4A7gcWAH8LCZbZd0j6QbwsOu\nAXZKehloBe4Ntz8CvApsI5gH2WJm/xru+zDwJWBXeMy/l+o9uOmV2pNmdfMiWhvryx44tnQFP/+q\n85bx8sE+BoZGI5235+hxjh0fAbzH4SpXSbPjmtljwGM52z6V9fwRgiCRe94Y8N8KXHMTwS26bg7J\n/KX+0xc0c3x4tOyBI7UnTXWV+JWrzuWHu4+wtauHq85fNvV5YbvPXbbQexyuYpV7ctxViP09gxzq\nGyKZiJNMLOGNI8c5OjBctvZs7kxzYWsDbzkvCBZRA9nmPWkW1Fbzs2taOOiBw1UoDxxuRmS+mIPA\nEQdgS5l6HePjxpbONMlEnKWL6jh32cKJCe+ppDrTrFvRxIolC+gbGqU/4hCXc/OJBw43I1Kdaepq\nqrikvZH1HU1UKfirvxxeOzJA7+AoG8IAlkzEI/U4hkbHeHFfL8mVcdqbYgAc8F6Hq0AeONyMSO1J\nc+k5jdTVVLGovoYLWxvKNs+R2hP2flaeDBwHe4fY3zP5uowd+/sYHhsnmYjT2uiBw1UuDxyu5EbH\nxtm2t2diiAqCL+stnWmCzDEzK9WZZnF9Dee3LJ5oC5wMKAXP23Ns4viJHoffWeUqkAcOV3I7D/Zx\nYmTstMDRc2KE1w4PzHh7Up1p1nc0UV0VJFZee04jddVVU/aAUp1pljfU094Uy+px+OpxV3k8cLiS\ny3whb0gsmdiWGSaa6eGqwZExduzvPSWI1ddUc8k5jVPOuaTCCXVJxGqrWbKw1nscriJ54HAll9qT\nZumiOhJLF0xsW7O8gUV11TMeOLbv62F03E4JHAAbEnG2dfUwOjae97xjA8O8fuT4RMADaG2M+RyH\nq0geOFzJZf+lnlFdJdZ1NM144Ni85+RtwdmSiTgnRsZ4+WD+lO+prtPPa2+K+SJAV5E8cLiS6hsc\nYVd3P5d3xE/bl0wsYcf+XgZHZi5TbqozzTlNMZaHcxQn2zL50NmWzjQSrM96H21NCzztiKtIHjhc\nSW3t6sGMU4Z4MpKJOCNjxvYZzJSb6kznbcu5yxayZGFtwYWAqc40Fy5vYHH9ySw9bY0xDvcPz4oU\n8c7NJA8crqQmVozn6XFsmOEJ8sP9Q3QdO3HaMBWAJC4vsBDQ7ORK82yZW3IP9Q6VpsHOzVIeOFxJ\nbd6T5rzmRTQtrD1tX2tjjPam2IwFjomFf1l3d2VLJuK8cqifvsGRU7a/cSTIiJvbU2n1tRyuQnng\ncCWTyYib7y/8jCDdR3EV+M5UqjPIiLtuRVPBtpjBtq6e087L7M/maUdcpfLA4Upmb/oEh/uH8s4p\nZCQTcTqPnuBIf+mHe1KdaS5qbWBBXXXBtsDpObRSnWkW1lVzYWvDKds97YirVB44XMkU+ks921R3\nM02XiYy4kwSx+MI6VjcvOq0tm8OMuJmV5hmNsRoW1lX7UJWrOCUNHJKuk7RT0i5Jd+XZf66kJyVt\nlfSMpI5w+9slpbIeg5JuCvd9RdJrWfuSpXwP7syl9gQZcS9uayx4zLow9UepA8fuw/30DY1OGsTg\nZKbcTA6todExdoQZcXNJos0XAboKVLLAIakauA+4HlgL3CZpbc5hnwMeNLP1wD3ApwHM7GkzS5pZ\nErgWOA48kXXexzL7zSxVqvfgzk6qM81lYUbcQhbWzUym3MzCvw0RAkd33xD7wmDw4r5ehsfGC57X\n1hTzHoerOKXscVwJ7DKz3WY2DDwE3JhzzFrgqfD503n2A7wH+HczO16ylrppNzKRETf/HUzZMn/l\nj4+XLlNuqjNNQ1ZG3MnaAifvwDo53Jb/fXiPw1WiUgaOFUBn1uuucFu2LcAt4fObgQZJuYWfbwX+\nIWfbveHw1ucl1ef74ZJul7RJ0qbu7u4zewfujO080MfQ6PikcwoZGxJx+gZH2V3CTLmpzjTrE01U\n5cxT5LqkPeghZe70SnWmaWuM0dYUy3t8W1OMg72DJQ16zs025Z4cvxO4WtJm4GpgLzCxDFdSO7AO\neDzrnLuBi4ErgKXAx/Nd2MzuN7ONZraxpaWlRM13hWTuTJpqaAhKnyn3xPAYLx3om3J+A6CupopL\nz2mcaMtUtxO3NcUYHTcOD/giQFc5Shk49gKJrNcd4bYJZrbPzG4xsw3AJ8Jt2d8e7wX+2cxGss7Z\nb4Eh4MsEQ2JulkntSbNsUR0dSxZMeez5LYtZXF9TsvUcL+zrYWzcIg2bQTBctW1vD4f6BnkjJyNu\nrrbwltyDPR44XOUoZeB4DlgjabWkOoIhp0ezD5DULCnThruBB3KucRs5w1RhLwQFqVZvAl4oQdvd\nWUp1HjstI24h1VVifQkz5aYKZMQtJJmIMzgyzj9u6pryvMwQ1lRlZ52bT0oWOMxsFLiDYJhpB/Cw\nmW2XdI+kG8LDrgF2SnoZaAXuzZwvaRVBj+W7OZf+uqRtwDagGfijUr0Hd2Z6TozwavdA5C9qCL6c\nX9rfV5JMuanONCviC2hpyDsddppMwamv/fANqkTBleZwMnB4llxXSWqmPuTMmdljwGM52z6V9fwR\n4JEC577O6ZPpmNm109tKN922ZmpXRJgYz0gm4oyOGy/s7WHjqqXT2p5CGXELSSxdwNJFdRzoHeTi\ntgYW1Rf+36R5UT01VfK6HK6ilHty3M1DmaGh9Xky4hZSqgnyQ32D7E2fiDRJnyFpore0YYqAU1Wl\noBKg9zhcBSlpj8PNft9+YT9vvaCZxtjp2WvPVKozzfkti2haEP2ayxtirIgv4NEt+xguUL71TOw5\nEiz/KWbYLHP8Uy8dinRea2P9tKzl+O7L3VzS1nBakSnnZhsPHBXstcMD/Obf/YQ7f+FC7rh2zbRc\n08zY0pXm6guXF33uz12ynAd/+AZbc7LTnq2Whnoum2SeIp+3X7Scr/zgdd56fvOUx7Y3LWDHgbMr\nRtVzYoRf+/KPuf1nz+eu6y8+q2s5V2oeOCrY5j3Hwn+nb3io69gJDvcPFzWnkPEHN1zK/3jnJdPW\nloza6qrTEhROZV1HEz/55DsiHdvaGOPpnYcws0h3keWztSvNuMG+tN+d5WY/DxwVLHuR29l86WUr\nZuFfLknEavOnPJ/N2ptiHB8eo29o9IyH/DLzQp6+xM0FPjlewTKB48jAMF3Hpucv3dSeNPU1VVzU\n1jD1wfNE6zQUdMr8t/BJdjcXeOCoUIMjY+zY38vPXhikY8ktXnSmUp3HWLeiidrqyvnVOttKgJlK\niRAEjkxKd+dmq8r5v9udYvu+XkbGjFuvSFBfUzUxVHI2hkfHeWFfb9F3MM11bWdZCbDr2AmODAxz\nXssihkfHOXZ8ZOqTnCsjDxwVKvMX7sZzl7BuRdO05Il66UAvwxEz4s4nyxuDFelnOsyU6e1df1kb\n4OlL3OzngaNCpTrTnNMUY3ljjGQizgv7gi/9s70mFL9mYq6rr6lm2aK6M149npkXytzC7OlL3Gzn\ngaNCpTqPTfQMkivjDI+O89JZrkVI7UnTvLieFfGpM+LON5m6HGciMy+UySTs6UvcbOeBowId6R+i\n8+iJiZ7BRNW7s5wgz9SumI7beueatsbYGX3hZ88LtTTUUyU46IHDzXIeOCpQbjnUFfEFNC+uP6sJ\n8p7jI+w+PDBlbqf56kx7HNnzQrXVVTQvrvceh5v1PHBUoFRnmuoqTaQLzyT1O5seR6qrMuc3Mtoa\nYxwdGC46LXzuvFB7kydMdLOfB44KlOpMc1FrAwvqTq7S3rAyzu7DA/Sc4a2gqT1pJFjfUVxOqPki\nU5fjUG9xlQBz54VaG2O+etzNeh44Ksz4uOWtT5H5i3dL15n1OlKdx7igZTEN05hldy4500qAufNC\n3uNwc8GUgUPSsjO9uKTrJO2UtEvSXXn2nyvpSUlbJT0jqSPc/nZJqazHoKSbwn2rJf0ovOY3wrK0\nLqLdhwfoGxw9bUhpfUcT0plNkGdWPlfqMBVkrR4v4ks/37xQa1OMvsFRBoZGp72Nzk2XKD2OZyX9\no6R3qojbZSRVA/cB1wNrgdskrc057HPAg2a2HrgH+DSAmT1tZkkzSwLXAseBJ8JzPgN83swuAI4B\nH4raJncyMOQmIWyI1XJBy+IzChx7jh7n2PGRilv4l631DFaP55sXOpMA5NxMixI4LgTuB34FeEXS\n/y3pwgjnXQnsMrPdZjYMPATcmHPMWuCp8PnTefYDvAf4dzM7HgauazlZbvarwE0R2uJCqc5jLK6v\n4byWxafty0yQF5srqVIX/mVriNWyuL6mqC/8fPNCbY3BXIfPc7jZbMrAYYHvmNltwG8AHwB+LOm7\nkq6a5NQVQGfW6y5OryG+BbglfH4z0JBnaOxW4B/C58uAtJll+vH5rgmApNslbZK0qbu7e5JmVpZU\nZ5r1HU1561MkV8Y5OjBM59Hixuk370mzoLaai1orJyNuPsVWAsw3L9Q2DZl2nSu1SHMckj4iaRNw\nJ/A7QDPwe8Dfn+XPvxO4WtJm4GpgLzBxP6OkdmAd8HixFzaz+81so5ltbGlpOctmzg+DI2O8tL+v\nYM8gs31zkXmrUp1p1q1ooqaCMuLm0960IHKPo9C80ETCRB+qcrNYlP/Tfwg0AjeZ2S+a2TfNbNTM\nNgF/Pcl5e4FE1uuOcNsEM9tnZreY2QbgE+G27EH29wL/bGaZe0SPAHFJmQJUp13TFfbC3h5Gx61g\n4LiotYEFtdVFzXMMjY7x4r7eip7fyCjmVtpC80IL6qppWlDrPQ43q0UJHBeZ2R+aWVfuDjP7zCTn\nPQesCe+CqiMYcno0+wBJzZIybbgbeCDnGrdxcpgKCwbfnyaY94Bg2OxbEd6DI2suosCXfE11VZgp\nN3rg2LG/j+Gx8Yqe38hob4pxqG+IsfGp54gmmxdqbzqz9CXOzZQogeMJSRO/3ZKWSJpy6Cich7iD\nYJhpB/CwmW2XdI+kG8LDrgF2SnoZaAXuzfo5qwh6LN/NufTHgY9K2kUw5/G3Ed6DI0jfvSK+gOUN\nsYLHJFfG2V5EptxUWLfcA0dwK+3YuHG4f+pFgJPNC7U2nnnCROdmQpSa4y3Zw0dmdkzS8igXN7PH\ngMdytn0q6/kjnLxDKvfc18kz8W1muwnu2HJFSu2Zeq1FMhFkyt2xv5fLIwSDVGea5Q31E7eRVrL2\nrFtyM7fnFjLZvFB7U4zt+84uU7FzpRSlxzEmaWXmhaRzAa9tOcd09w2xN30iUuCA6AsBKzkjbq6T\nq8cn7y1MNS/U2hjjyMDQWddHca5UogSOTwD/n6SvSfo74HsE8xFuDplqfiOjvSnG8ob6SIHj2MAw\nrx857hPjoUzgmGqYaap5ofamGGZwqM+Hq9zsNOVQlZl9W9KbgLeEm37XzA6XtlluuqU6j1FdJS47\nZ/IkhMVkyq30jLi5li6so7ZaU/Y4ppoXas0KQB1LFk5vI52bBlFvvB8DDgG9wFpJP1u6JrlSSHWm\nubjt1Iy4hSRXxnnt8ADp48OTX3Ni5bMHDoCqKkWa2J5qXqg94pCXc+USZQHgrxMMTz0O/EH47++X\ntlluOo2PG1s7eyL3DKLOc6Q601y4vIHF9VHusagMQSXAyVfeTzUv1HYGea+cm0lRehwfAa4A3jCz\ntwMbgLOrMepm1Kvd/fQNnZ4Rt5D1HfEpM+WaGVu6Kjsjbj5BJcDCt+NGmRdqWlBLrLbKA4ebtaIE\njkEzGwSQVG9mLwEXlbZZbjptzmTEjTiJvbi+hguXN0waOF4/cpx0hWfEzSfT4yiUKDLKvJAk2hq9\nLoebvaIEjq5wAeC/AN+R9C3gjdI2y02nVGeahlgN5zWfnhG3kGQizpZJMuWmOn3hXz5tTTEGR8bp\nPZG/nkbUeaG2Jq8E6GavKNlxbzaztJn9PvBJgpXansp8DkntSXN5R5yqPBlxC0mujHPs+AhvHDle\n8JoL66q5sMIz4uZqbwrSou/vzT/PEXVeyHscbjab9Lc3LMa03cwuBjCz3PQfLo/d3f3800+6KLKs\nRUkYsPNgH7919flFnZfpSfzJ4y+xatmi0/b/x45DrFuRPz17JWtrqgfgi8+8OlFHPNtP3jjGO9e1\nR7jOAg727md83KYM+N/fdZimBbVctqK4eu8v7O2h98QIb72guajznJs0cJjZWFj6daWZ7ZmpRs11\nX/7+63zt2TeorZ4dX6qxmirefnFxqeUvbG1gzfLFfOfFg3n3C/Hrb1s9Hc2bVy5oaWB5Qz2Pbduf\nd391lfj5ta1TXqetsZ6RMePo8WGaF9cXPM7M+MhDKS5YvoiHbp+sPM7p/vDfXuRg7yDPfOztRZ3n\nXJT7KJcA2yX9GBjIbDSzGwqfUtn295zg4rYGvv27c3e5S3WV+M5Hry53M+acpoW1/PgTP3/W12lr\nOlkJcLLA0XXsBIf7hzgxPMrYuEXuAY6OjbO1q4cxM8zMU8a4okQJHJ8seSvmmQO9gxPpJ5w7E9mV\nACcbgsrc+TYwPMYrh/q4uK0x0vVfPtjPiZGgZlr6+AhLFtWdZYtdJYmScsTnNYp0oGeQdUWONzuX\nbWL1eIRV6BKYBTcsRA0c2bda7+8Z9MDhihJl5XifpN7wMShpTJLnfC5geHScw/3DU6bVdm4yzYvr\nqa4SB6fKe9WZZkMiTnxhbVEFuFJZ5YG99ocrVpTbcRvMrNHMGoEFwLuBv4pycUnXhZPruyTdlWf/\nuZKelLRV0jOSOrL2rZT0hKQdkl4MCzsh6SuSXpOUCh/JiO91RmT+J/T6FO5sVFeJ5Q31k+arGhkb\n54W9PWxYuYTLO6IlpsxIdaYnikh5TixXrKhJDoGgdKuZ/Qvwn6Y6NryV9z7gemAtcJuktTmHfQ54\n0MzWA/cAn87a9yDwWTO7hKBw06GsfR8zs2T4SBXzHkotEzi8x+HO1lQJE1/a38fQaJCePZmI8/LB\nPgaG8i88zNY3OMIrh/p5x9pWJHy9iCvalHMckm7JelkFbASi/KZdCewKK/Yh6SHgRuDFrGPWAh8N\nnz9NsDqdMMDUmNl3AMysP8LPmxUyf71lFoI5d6bam2K8fLCv4P7s1fuLYzWMG2zt6uGq85dNet1t\nXT2YwcZVS2heXM+BKZIyOpcrSo/jl7Ie/wnoIwgAU1kBdGa97uL0UrBbgExguhlokLQMuBBIS/qm\npM2SPhv2YDLuDYe3Pi8p772Kkm6XtEnSpu7u7gjNnR6ZvxDbvMfhzlLQ4yicMHFzZ5rmxXV0LFlA\nsiN65cZM7rJkIk57U4wDk/wM5/KJclfVr5Xw598JfEHSBwlSt+8lqP1RA7yNIBPvHuAbwAcJ0p3c\nDRwA6oD7gY8TDHPltvv+cD8bN26csTXc+3sGWVBbTeMCTzXuzk57U4z+oVH6BkdoiNWetj87PfuS\nRXWsWrbwlEnvQlKdaVY3LyK+sI7WxhhvHBmY8hznskW5q+qrYZLDzOslkh6IcO29QCLrdUe4bYKZ\n7TOzW8xsA0GJWswsTdA7SZnZbjMbJRjCelO4f3841zIEfJlgSGzWyKzh8AVV7mxNVoq25/gIu7sH\nTkkyGaVyo5lNBBwIgpMnU3TFijJUtT78MgfAzI4R9ASm8hywRtJqSXXArcCj2QdIapaUacPdwANZ\n58YlZfJkXEs4NyKpPfxXBMkWX4jQlhlzoGfQh6nctMj8HuW762nLRHr2JRPbkok4B3uHJi0kta9n\nkO6+oYnA0doYo3dwlOPDU0+qO5cRJXBUSZr47ZS0lGhDXKPAHQQVA3cAD5vZdkn3SMqkK7kG2Cnp\nZaAVuDc8d4xgGOtJSdsAAX8TnvP1cNs2oBn4owjvYcYc6PFV4256ZK8ez5VZ+Lc+cXKhaXJl8L9p\nak/hXkdmX3aPo9DPcK6QKAPxfwr8UNI/hq9/mfALfipm9hjwWM62T2U9fwR4pMC53wHW59l+bZSf\nXQ7j48ZBTzfipknrJCVkU51pzm9ZTGPW3Mcl7Q3UVVeR6kxzfYEMvKnOY9TVVHFJe7DCPLtM7Xkt\n0eu1uMoWpefwoKRNBMNFALeY2YuTnVOpjgwMMzpuPlTlpkWstpolC2tPW2eRmae49uLlp2yvr6lm\n7TmNE3dN5ZPqTHPpOY3U1QSDDRO9Gl/L4YoQZXL8LUCnmX3BzL5AUBHwp0rftLkn85eh9zjcdGlr\nWnBaj6Pz6AmODgznrb6YTMTZ1tXD6Nj4aftGxsbZtrfnlPMyv6u+etwVI8ocxxeB7AV4/eE2l+OA\nr+Fw06ytsf603sDmScr2JhNxToyM8fLB09fM7jzQx+DI+CnnLayroTFW4/mqXFGiBA5ZVuFpMxsn\n2txIxcmswPU8VW665OtxpDrTxGqruLjt9LK9maCQ77bczJ1YG7LuxIIgy4H3OFwxogSO3ZL+u6Ta\n8PERYHepGzYXHegdpLpKLJuk8I5zxWhrjHFkYJih0bGJbanONOtWNFFTffr/vucuW8iShbV5FwKm\n9qRZuqiOxNJT0+G0Nk2eE8u5XFECx28CbyVYvNcF/BRweykbNVft7xmktaHe63C7aZPpvR4K04IM\nj46zfV9v3mEqAElcXmAhYPZK81N+RmPMexyuKFHSqh8ys1vNbLmZtZrZ+8zs0FTnVaKDvYO0+jCV\nm0atOXc97djfy/Do+CkL/3IlE3FeOdRP3+DIxLa+wRF2dffnDTitTTEO9w8xkmdC3bl8omTHjQEf\nAi4FJr4Vzey/lrBdc9L+nsG8487Onan2nLueMj2J5Mr8PQ4IAodZkAX3rRc0A0HWXLP8E+rtTTHM\n4FDfECvintXZTS3KUNXXgDaCzLjfJcg5VTjXc4UyMw70DHodDjetMr9PB7MCR0tDPedM0rPNBIfs\n9RyZgHN5nsDRNslCQ+fyiRI4LjCzTwIDZvZV4BcJ5jlclr6hUY4Pj/kdVW5aNcZqWFhXfUqPI988\nRbb4wjpWNy86ZZ5j854057UsomnB6Vl2J0tt4lw+UQJHZqA0LekyoAlYPsnxFSnzF6H3ONx0kkRb\nWAkwfXyY1w4PFJwYz5bJlGtmp2XEzTXR4/A7q1xEUQLH/WGSw/+LILvti8BnStqqOcgr/7lSaWuK\nsb/nxEQPYkPEwNHdN8S+nkH2pk9wuH+o4HnxhbXU11R5JUAXWZRcVV8Kn34POC93v6QPhENYFc1X\njbtSaWuM8aPXjk5kxF3X0TTlORMLAfekMSzclv9OLEm0eSVAV4QoPY6pfGQarjHnZcaHlzf64j83\nvdrCBXo/2ZNmzfLFeasB5rqkPUhkmOo8RmpPmvqaKi5uL3zHX1tjzHscLrLpCBy+2o2gx7F0UR2x\n2uqpD3auCG1NMUbHjWd3H4k0vwFQV1PFpec0kupMk+pMc9mKJmrzrDTP/hk+x+Gimo7AMWP1vGcz\nr/znSiXzezXVwr9cyUScbXt7TsuIm/dnNMU42DNEVlo65woqaY9D0nWSdkraJemuPPvPlfSkpK2S\nnpHUkbVvpaQnJO2Q9KKkVeH21ZJ+FF7zG2FZ2rLzyn+uVLJ/r6L2ODLHDo6MMzQ6PnXgaIwxPDbO\n0YHhM26nqxzTETi+n2+jpGrgPuB6YC1wm6S1OYd9DnjQzNYD9wCfztr3IPBZM7sEuBLIpDn5DPB5\nM7sAOEawqr3sDnjlP1cimd+rBbXVXNgavUrfhpx65JPJXaHu3GSiFHL6iKRGBf5W0k8k/UJmv5nd\nUeDUK4FdZrbbzIaBh4Abc45ZCzwVPn86sz8MMDVh+VjMrN/MjitY9XQtJ8vNfhW4KdI7PQNf/9Eb\n/PV3X53yuMGRMY4ODPtQlSuJ5kX11FSJdR35M+IWkli6gKWL6mheXEfHkslvE59Yoe7zHC6CKL+F\n/9XMeoFfAJYAvwL8cYTzVgCdWa+7wm3ZtgC3hM9vBhokLQMuJFhw+E1JmyV9NuzBLAPSZjY6yTUB\nkHS7pE2SNnV3d0do7ul++H0p2PUAABrYSURBVOoRvvbDN6Y8LpO51HscrhSqqsT169q5eUPeX/WC\nJPHejQl+eWNi0pXmcHL9kfc4XBRRCjJlfuPeCXzNzLZrqt/C6O4EviDpgwTrRPYCY2G73gZsAPYA\n3wA+CHwr6oXN7H7gfoCNGzee0YxfMhHn37bu51DfIMsbCgcFX8PhSu0vb9twRufddf3FkY5rXlxH\nlbzH4aKJ0uN4XtITBIHjcUkNQJT8y3uBRNbrjnDbBDPbZ2a3mNkG4BPhtjRBTyIVDnONAv8CvAk4\nAsQl1RS65nTasPLkIqrJ7PfKf26Oq6muYnmD1+Vw0UQJHB8C7gKuMLPjQC3waxHOew5YE94FVQfc\nSpCyZIKkZkmZNtwNPJB1blxSS/j6WuDFsITt08B7wu0foIheSLEuPaeJmirlLYqTLfNXmtficHOZ\nVwJ0UUUJHFcBO80sLem/EOSs6pnqpLCncAfwOLADeDgc5rpH0g3hYdcAOyW9DLQC94bnjhEMYz0p\naRvBcNnfhOd8HPiopF0Ecx5/G+mdnoFYbTWXtDdOGTj29wyyqK6ahnovxe7mLq8E6KKK8k33ReBy\nSZcDvwd8ieBW2aunOtHMHgMey9n2qaznj3DyDqncc78DrM+zfTfBHVszIpmI88+b9zI2bgVLwmYq\n/03f1I9zM6+tKcb3dx0udzPcHBClxzEaDhHdCHzBzO4DKqbMXTIRp39olFe7+wses79n0Oc33JzX\n1hSjb2iU/qHRqQ92FS1K4OiTdDfBbbj/bzgnMXWWtXkiGWGC/KBX/nPzgFcCdFFFCRz/GRgiWM9x\ngOBOps+WtFWzyOpli2iM1ZxShjPb2LhxsG/IexxuzvNKgC6qKQNHGCy+DjRJehcwaGYPlrxls0RV\nlbg8rKaWz5H+IcbGzddwuDnPKwG6qKKkHHkv8GPgl4H3Aj+S9J7Jz5pfNiTi7DzQy/Hh08d+M3eh\ntHnlPzfHnexxeF0ON7kod1V9gmANxyGAcG3Ff1Dgbqj56PJEnHGDbV09/NR5y07Z56vG3XwRq60m\nvrDWexxuSlHmOKoyQSN0JOJ588ZEGc48w1UHJnocHjjc3BdUAvQSsm5yUXoc35b0OPAP4ev/TM7a\njPlu2eJ6EksX5A8cvYPUVotli2ZFWRDnzkpQCdCHqtzkpgwcZvYxSbcAPxNuut/M/rm0zZp9kokl\nbHr96GnbD/QECRCrCiwOdG4uaW+K8cLe3nI3w81ykwaOMJX5f5jZ24FvzkyTZqdkIs6/btkXrBLP\nms/wyn9uPmltjHG4f4jh0XHqaipqRNoVYdLfjDBn1Likphlqz6yVmefYnLMQ0Cv/ufkksx7pUJ9P\nkLvCovxJ0Q9sC6v//UXmUeqGzTaXntNIbfWpmXLNLOhx+B1Vbp5o9dXjLoIok+PfpMKHqSA7U+6x\niW29J0Y5MTLmq8bdvJGpBOi35LrJRAkcjxCsFh+DiXmP+pK2apZKJuL80/NdE5lyM/9zeZ4qN194\nvioXRZShqieB7GXRCwgWAFacZCLOwPAYrxzqA7zyn5t/GhfUsKC22gOHm1SUwBEzs4mc4uHzhaVr\n0uw1sRAwnCA/6D0ON89Ioq0pxn4fqnKTiBI4BiS9KfNC0puBSCuEJF0naaekXZLuyrP/XElPStoq\n6RlJHVn7xiSlwsejWdu/Ium1rH3JKG2ZDqubF9G0oHZigjyTp8oDh5tP2hpjHPQeh5tElDmO3wX+\nUdI+ghKubQSrxycVzoXcB7wD6AKek/Somb2YddjngAfN7KuSrgU+TVD3A+CEmRUKCh8LqwfOKOnU\nTLkHewdpXlzn97u7eaWtKcaPXzt9satzGVHSqj8HXAz8FvCbwCVm9nxmv6R3FDj1SmCXme02s2Hg\nIYIqgtnWAk+Fz5/Os3/WSSbi7DzYR//QKPt98Z+bh9qaYhzqG2R83MrdFDdLRfpT2cxGzOyF8DGS\ns/szBU5bAXRmve4Kt2XbAtwSPr8ZaJCUST8bk7RJ0rOSbso5795weOvzkvLe4SXp9vD8Td3d3ZO+\nv2JsSMQxg61daV/D4ealtsYYI2PGkYHhcjfFzVLTMcZyNkma7gSulrQZuBrYC4yF+841s43A+4A/\nk3R+uP1ugh7QFcBS4OP5Lmxm95vZRjPb2NLSchZNPNXlWZlyfdW4m48yv9MHfYLcFTAdgaNQf3Yv\nkMh63RFuO3mi2T4zu8XMNhDU/cDM0uG/e8N/dwPPABvC1/stMAR8mWBIbMYsXVTHucsW8uzuo6SP\nj3iPw807md/p/T5B7goo5azuc8AaSasl1QG3Ao9mHyCpWVKmDXcDD4Tbl2SGoCQ1Az8NvBi+bg//\nFXAT8EIJ30NeyUScH756GPDKf27+yaxL8tXjrpDpCByv59toZqPAHcDjwA7gYTPbLukeSTeEh10D\n7JT0MtAK3BtuvwTYJGkLwaT5H2fdjfV1SduAbUAz8EfT8B6KkkzEGRkLOlq++M/NN8sW1weZEbyE\nrCsgyu24SHorsCr7eDN7MPz3lgKnYWaPkVP0ycw+lfX8EfKUoDWzHwDrClzz2ihtLqXMQkDwNRxu\n/qmuEq0N9V4J0BU0ZeCQ9DXgfCDFyYlrAx4sYbtmtbXnNFJXXcXw2LhPjrt5ySsBuslE6XFsBNaa\nmd/UHaqvqeaScxrZfaifxfWROm3OzSltTTG+v+sIH304VfS57U0x7vyFiwimISvLt184wBMvHpj2\n665etojf+bk1037dMxXlW+8FgtXi+0vcljnltisSvHSgr9zNcK4kfu7iVrbt7Sl6BfngyBiH+4e5\nKbmCNa0NJWrd7PXZx1/iQM8gSxbVTds1jw+P8c2Bvbz3isSsGRqPEjiagRcl/RiYGPQ0sxsKnzL/\n3XrlynI3wbmSefebO3j3mzumPjDHrkN9/Pz/+h6bO9MVFzh6TozwavcAv/eOC6e1d/D8G8d49xd/\nwOY9aa67rG3arns2ogSO3y91I5xz88N5zYtpiNWQ6kzz3o2JqU+YR7Z2BTnskivjUxxZnOzqo3Mm\ncJjZd2eiIc65ua+qSlzeEZ8oPVBJMu95fcf0Bo581UfLbcp1HJLeIuk5Sf2ShsN0570z0Tjn3NyT\nSQR6Ynhs6oPnkVRnmvNbgtIL0y2ZiLOtq4exWZJ4MsoCwC8AtwGvEFT/+3WCdOnOOXeaZCLO2Lix\nbW9PuZsyY8yMVGeaZGJJSa6fW3203KJmx90FVJvZmJl9GbiutM1yzs1VmTH+2TS0Umpdx05wZGB4\n2uc3MnKrj5ZblMBxPMw1lZL0J5L+j4jnOecqUPPiejqWLJgoeFYJNofvdUOiNIEjt/pouUUJAL8S\nHncHMECQ8fbdpWyUc25uSybibOmsnKGqLZ1p6muquKitNLcg51YfLbcoFQDfIKi50W5mf2BmHw2H\nrpxzLq9kIs7e9AkO9VVGht1UZ5p1K5qorS7dYEwyEeflg30MDI2W7GdEFeWuql8iyFP17fB1UtKj\nk5/lnKtks21MvpRGxsZ5YW/PRJG3Ukkmmhg32NpV/p5clPD4+wTFkjIFllLA6hK2yTk3x122ooma\nKs2aoZVSeml/H0Oj46dkzS6FyztOVh8ttyiBY8TMckPc7LiZ2Dk3K8Vqq7m4vWFWfMmVWubusVIH\njmWL61m5dOGsuFstSuDYLul9QLWkNZL+EvhBlItLuk7STkm7JN2VZ/+5kp6UtFXSM5I6svaNSUqF\nj0eztq+W9KPwmt8I7/hyzs0yyUScrbNo0VqpbO5M07y4jo4lpa8GmpwlE+RRAsfvAJcSJDj8e6AH\n+MhUJ0mqJlgoeD2wFrhN0tqcwz4HPGhm64F7gE9n7TthZsnwkZ1Q8TPA583sAuAY8KEI78E5N8OS\niSX0D43yand/uZtSUsHCv/iMpJFPJuIc7B1if5mrM0YJHGvDRw0QA24kqCc+lSuBXWa228yGgYfC\nc3Ov/VT4/Ok8+08R1hm/lpNVA79KUHfcOTfLVMIEec/xEXZ3D5R8mCpjYnFlmT/TKIHj68ADwC3A\nu8LHL0U4bwXQmfW6K9yWbUt4XYCbgQZJy8LXMUmbJD0rKRMclgHpsJ55oWs652aB85oX0RCrmVgc\nNx9tyWTELVGqkVxr209myi2nKGnVu83sX0v08+8EviDpg8D3gL2cLE97rpntlXQe8JSkbQTDZJFI\nuh24HWDlSq+d4dxMq6rSrBmTL5VUZxoJ1ieaZuTnxWqrWdveWPZgHKXH8T8lfUnSbZJuyTwinLeX\nYJV5Rke4bYKZ7TOzW8xsA/CJcFvmtt+94b+7gWeADcARIC6pptA1s659v5ltNLONLS0tEZrrnJtu\nyUScnQd6OT5c/kVrpRBkxF1MY2z6M+IWksmUOzo2PmM/M1eUwPFrQJIgseEvhY93RTjvOWBNeBdU\nHXArcMrCQUnNkjJtuJtgSAxJSyTVZ44Bfhp4Max7/jTwnvCcDwDfitAW51wZJBNxxg22zYJFa9Pt\nZEbcmZnfyEiujHNiZIyXD5bvpoMoQ1VXmNlFxV7YzEYl3QE8DlQDD5jZdkn3AJvM7FHgGuDTkoxg\nqOq3w9MvAf4fSeMEwe2PzezFcN/HgYck/RGwGfjbYtvmnJsZExPknWl+6rxlUxw9t3QePcHRgeGZ\nDxzhfEqqM83acxpn9GdnRAkcP5C0NuuLOzIzewx4LGfbp7KeP8LJO6Syj/kBsK7ANXcT3LHlnJvl\nli2uJ7F0fmbK3TxDC/9yrVq2kPjCWlKdx3jfT5Vn/jZK4HgLQUr11wjWcgiwcO2Fc85NKplYwqbX\nj5a7GdMu1ZkmVlvFxSXKiFuIFJbnLWMwjhI4vGiTc+6MJRNx/nXLPg72DtLaGCt3c6ZNJiNuTQkz\n4haSTMT53ivd9A2O0DCDE/MZkdKq53vMROOcc3NfZihn8zxaCDg8Os72fb0zPkyVkVwZx8p404FX\n8nPOldSl58yORWvTacf+XoZHx2ds4V+uZJgpt1zrOTxwOOdKKlZbzSXtjbMiq+t0yQTBUtUYn8qS\nRXWsWrawbMHYA4dzruQyi9bmS6bcVGealoZ6zmkq35xNZlV+sLxtZnngcM6VXDIRZ2B4jFcO9ZW7\nKdNiJjPiFpJMxOnuG2Jfz8yX5/XA4ZwrufmUKTd9fJjXDs9cRtxCkivDhYBl+Ew9cDjnSm518yKa\nFtTOiwnyzHvYUObAcUl7A3XVVWWZO/LA4ZwrOUlcPk8y5WYy4q7rmJmMuIXU11Sz9pzGsnymURYA\nOufcWUsm4nzhqVe4/cFN5W7KWdm2t4c1yxeXZeFdrmQizkPP7WFkbJzaGVyI6IHDOTcj3rmuje/u\nPMSeo8fL3ZSz0rSgtmw5onJtWBnnKz94nZ0H+rhsxcz1gDxwOOdmxMVtjXzrjp8pdzPmlezswzMZ\nOHyOwznn5qiVSxeydFHdjM9zeOBwzrk5KsiU2+SBwznnXHTJxBJe7e6nd3Bkxn5mSQOHpOsk7ZS0\nS9JdefafK+lJSVslPSOpI2d/o6QuSV/I2vZMeM1U+FheyvfgnHOzWSZT7tbOmcuUW7LAIakauA+4\nHlgL3CZpbc5hnwMeDItC3QN8Omf/HxKUlM31fjNLho9D09x055ybMzKZcmdyIWApexxXArvMbLeZ\nDQMPATfmHLMWeCp8/nT2fklvBlqBJ0rYRuecm9OaFtZyXvOiGZ3nKGXgWAF0Zr3uCrdl2wLcEj6/\nGWiQtExSFfCnwJ0Frv3lcJjqkyqQZUzS7ZI2SdrU3d195u/COedmuZnOlFvuyfE7gaslbQauBvYC\nY8CHgcfMrCvPOe83s3XA28LHr+S7sJndb2YbzWxjS0tLaVrvnHOzQHJlnMP9w3QdOzEjP6+UCwD3\nAoms1x3htglmto+wxyFpMfBuM0tLugp4m6QPA4uBOkn9ZnaXme0Nz+2T9PcEQ2IPlvB9OOfcrJa9\nEDCxdGHJf14pexzPAWskrZZUB9wKPJp9gKTmcFgK4G7gAQAze7+ZrTSzVQS9kgfN7C5JNZKaw3Nr\ngXcBL5TwPTjn3Kx3cVsjdTVVMzbPUbLAYWajwB3A48AO4GEz2y7pHkk3hIddA+yU9DLBRPi9U1y2\nHnhc0lYgRdCD+ZtStN855+aKupoqLpvBTLklzVVlZo8Bj+Vs+1TW80eAR6a4xleAr4TPB4A3T3c7\nnXNurtuwcgl/9+wbM5Ipt9yT484556ZBMhFnaHScnQdKX57XA4dzzs0DmQnyzTMwXOWBwznn5oGO\nJQtoXlw3IzXIPXA459w8IClcCFj61CMeOJxzbp5IJuK82j1Az4nSZsr1wOGcc/NEMrEEgK1dpR2u\n8sDhnHPzxPpEExIln+fwwOGcc/NEY6yW81sWl3whoAcO55ybR2YiU64HDuecm0eSiThHBkqbKdcD\nh3POzSMzsRDQA4dzzs0jF7c1EKutKukEuQcO55ybR2qqq1i3oqmkCwE9cDjn3DyTTMR5YV8vw6Pj\nJbm+Bw7nnJtnkoklDI+O89KB3pJc3wOHc87NM8mVJ0vJlkJJA4ek6yTtlLRL0l159p8r6UlJWyU9\nI6kjZ3+jpC5JX8ja9mZJ28Jr/oUklfI9OOfcXHNOU4yWhvqSTZCXLHBIqgbuA64H1gK3SVqbc9jn\nCOqJrwfuAT6ds/8Pge/lbPsi8BvAmvBx3TQ33Tnn5rSTmXLnWOAArgR2mdluMxsGHgJuzDlmLfBU\n+Pzp7P2S3kxQh/yJrG3tQKOZPWvBssgHgZtK9xacc25uSibi7D48QM/x6c+UW8rAsQLozHrdFW7L\ntgW4JXx+M9AgaZmkKuBPgTvzXLNrimsCIOl2SZskberu7j7Dt+Ccc3PTFauWcuWqpRwZGJr2a5d7\ncvxO4GpJm4Grgb3AGPBh4DEz65rs5MmY2f1mttHMNra0tExPa51zbo64cvVSHv7NqzivZfG0X7tm\n2q940l4gkfW6I9w2wcz2EfY4JC0G3m1maUlXAW+T9GFgMVAnqR/48/A6Ba/pnHOutEoZOJ4D1kha\nTfDlfivwvuwDJDUDR81sHLgbeADAzN6fdcwHgY1mdlf4ulfSW4AfAb8K/GUJ34NzzrkcJRuqMrNR\n4A7gcWAH8LCZbZd0j6QbwsOuAXZKeplgIvzeCJf+MPAlYBfwKvDv091255xzhamUOdtni40bN9qm\nTZvK3QznnJtTJD1vZhtzt5d7ctw559wc44HDOedcUTxwOOecK4oHDuecc0WpiMlxSd3AG5Mc0gwc\nnqHmzDX+2RTmn01+/rkUNtc+m3PN7LQV1BUROKYiaVO+OwecfzaT8c8mP/9cCpsvn40PVTnnnCuK\nBw7nnHNF8cARuL/cDZjF/LMpzD+b/PxzKWxefDY+x+Gcc64o3uNwzjlXFA8czjnnilLRgUPSdZJ2\nStol6a5yt6fcJD0g6ZCkF7K2LZX0HUmvhP8uKWcby0FSQtLTkl6UtF3SR8Lt/tlIMUk/lrQl/Gz+\nINy+WtKPwv+3viGprtxtLQdJ1ZI2S/q38PW8+FwqNnBIqgbuA64nqH1+m6S15W1V2X0FuC5n213A\nk2a2BngyfF1pRoHfM7O1wFuA3w5/V/yzgSHgWjO7HEgC14X1cj4DfN7MLgCOAR8qYxvL6SMEZSUy\n5sXnUrGBA7gS2GVmu81sGHgIuLHMbSorM/secDRn843AV8PnXwVumtFGzQJmtt/MfhI+7yP4IliB\nfzZYoD98WRs+DLgWeCTcXpGfjaQO4BcJ6gchScyTz6WSA8cKoDPrdVe4zZ2q1cz2h88PEBTcqliS\nVgEbCCpQ+mfDxHBMCjgEfIegwFo6LOYGlfv/1p8B/ycwHr5exjz5XCo5cLgiWXDvdsXevy1pMfBP\nwO+aWW/2vkr+bMxszMySQAdBT/7iMjep7CS9CzhkZs+Xuy2lUMqa47PdXiCR9boj3OZOdVBSu5nt\nl9RO8FdlxZFUSxA0vm5m3ww3+2eTxczSkp4GrgLikmrCv64r8f+tnwZukPROIAY0An/OPPlcKrnH\n8RywJrzLoQ64FXi0zG2ajR4FPhA+/wDwrTK2pSzCsem/BXaY2f/K2uWfjdQiKR4+XwC8g2AO6Gng\nPeFhFffZmNndZtZhZqsIvlueMrP3M08+l4peOR7+NfBnQDXwgJndW+YmlZWkfwCuIUj9fBD4n8C/\nAA8DKwlS07/XzHIn0Oc1ST8D/G9gGyfHq/8HwTxHpX826wkmeasJ/hB92MzukXQewQ0nS4HNwH8x\ns6HytbR8JF0D3Glm75ovn0tFBw7nnHPFq+ShKuecc2fAA4dzzrmieOBwzjlXFA8czjnniuKBwznn\nXFE8cDjnnCuKBw7nZoCkcyQ9EuG4/gLbvyLpPfn2OTfTPHA4NwPMbJ+ZleWLX1IlpxZyJeCBw7mQ\npFWSdkj6m7Ao0RNhGo18xz4j6TNhEaOXJb0t3F4t6bOSnpO0VdJ/y7r2C+HzhZIeDgtD/XNY2Gdj\n1rXvDQsjPSspO+Puz0vaFP68d4XHxiR9WdK2sGDQ28PtH5T0qKSngCcltUv6nqSUpBcy7XXuTHjg\ncO5Ua4D7zOxSIA28e5Jja8zsSuB3CdKzQFCYp8fMrgCuAH5D0uqc8z4MHAsLQ30SeHPWvkXAs2Fh\npO8Bv5G1bxVB9tlfBP5aUgz4bYLkvOuA24CvhtsB3gS8x8yuBt4HPB5msb0cSEX6NJzLw7uwzp3q\nNTPLfKk+T/BlXcg38xz3C8D6rPmIJoJg9HLWeT9DkCkVM3tB0tasfcPAv2Vd9x1Z+x42s3HgFUm7\nCdKX/wzwl+G1XpL0BnBhePx3snJnPQc8EGb5/Zes9+hc0bzH4dypshPOjTH5H1dDeY4T8Dtmlgwf\nq83siSJ+/oidTCCX+/NzE8tNlWhuYOLAoLrjzxKk8f6KpF8tok3OncIDh3PT63Hgt8K/7JF0oaRF\nOcd8H3hvuH8tsC7itX9ZUpWk84HzgJ0EWXvfn/lZBJl6d+aeKOlc4KCZ/Q1BKdM3FfvGnMvwoSrn\npteXCIatfhLW8ejm9LrSf0UwF/Ei8BKwHeiJcO09wI8JigL9ppkNSvor4IuStgGjwAfNbCj40ae4\nBviYpBGgH/AehztjnlbduRkmqRqoDb/4zwf+A7jIzIbL3DTnIvEeh3MzbyHwdDicJeDDHjTcXOI9\nDucmIek+gvrR2f7czL5cjvY4Nxt44HDOOVcUv6vKOedcUTxwOOecK4oHDuecc0XxwOGcc64o/z8f\n+YobXxniDgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yDeYWy9Ytpw2",
        "colab_type": "text"
      },
      "source": [
        "**Cross Validation: K-Fold**\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SUOgY2-t20mt",
        "colab_type": "text"
      },
      "source": [
        " ![alt text](https://scikit-learn.org/stable/_images/grid_search_cross_validation.png) \n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pdq4u9qVIOdH",
        "colab_type": "code",
        "outputId": "2f56b9c0-c176-4ee1-86a8-f408b9dc75a6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        }
      },
      "source": [
        "from sklearn.model_selection import KFold\n",
        "kf=KFold(n_splits=3,shuffle=True)\n",
        "kf.get_n_splits(X)\n",
        "\n",
        "\n",
        "for train_index, test_index in kf.split(X):\n",
        "  print(\"TRAIN:\", train_index ,\"TEST:\", test_index)\n",
        "  X_trainn, X_testt = X[train_index], X[test_index]\n",
        "  y_trainn, y_testt= y[train_index], y[test_index]"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "TRAIN: [  0   3   4   5   7   8   9  10  11  13  14  15  16  18  19  20  22  23\n",
            "  24  27  30  31  32  33  34  36  37  38  39  40  41  42  44  46  47  50\n",
            "  52  56  57  58  61  62  63  64  67  68  69  70  72  73  74  75  76  77\n",
            "  78  79  80  82  83  84  86  87  88  90  91  92  93  99 100 101 102 103\n",
            " 106 107 110 111 113 114 115 116 117 119 120 123 124 125 127 128 129 131\n",
            " 134 135 136 137 139 142 143 144 146 148] TEST: [  1   2   6  12  17  21  25  26  28  29  35  43  45  48  49  51  53  54\n",
            "  55  59  60  65  66  71  81  85  89  94  95  96  97  98 104 105 108 109\n",
            " 112 118 121 122 126 130 132 133 138 140 141 145 147 149]\n",
            "TRAIN: [  1   2   3   4   5   6   8   9  12  13  14  15  17  21  24  25  26  28\n",
            "  29  30  33  34  35  38  40  41  43  44  45  47  48  49  51  52  53  54\n",
            "  55  56  58  59  60  65  66  70  71  73  74  75  76  77  79  81  84  85\n",
            "  87  88  89  91  92  93  94  95  96  97  98 101 102 104 105 107 108 109\n",
            " 111 112 113 114 115 117 118 119 121 122 124 125 126 129 130 132 133 135\n",
            " 136 138 139 140 141 145 146 147 148 149] TEST: [  0   7  10  11  16  18  19  20  22  23  27  31  32  36  37  39  42  46\n",
            "  50  57  61  62  63  64  67  68  69  72  78  80  82  83  86  90  99 100\n",
            " 103 106 110 116 120 123 127 128 131 134 137 142 143 144]\n",
            "TRAIN: [  0   1   2   6   7  10  11  12  16  17  18  19  20  21  22  23  25  26\n",
            "  27  28  29  31  32  35  36  37  39  42  43  45  46  48  49  50  51  53\n",
            "  54  55  57  59  60  61  62  63  64  65  66  67  68  69  71  72  78  80\n",
            "  81  82  83  85  86  89  90  94  95  96  97  98  99 100 103 104 105 106\n",
            " 108 109 110 112 116 118 120 121 122 123 126 127 128 130 131 132 133 134\n",
            " 137 138 140 141 142 143 144 145 147 149] TEST: [  3   4   5   8   9  13  14  15  24  30  33  34  38  40  41  44  47  52\n",
            "  56  58  70  73  74  75  76  77  79  84  87  88  91  92  93 101 102 107\n",
            " 111 113 114 115 117 119 124 125 129 135 136 139 146 148]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zkUykW01IPrQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}
